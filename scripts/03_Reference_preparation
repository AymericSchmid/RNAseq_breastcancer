#!/usr/bin/env bash

#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=10M
#SBATCH --time=00:20:00
#SBATCH --partition=pibu_el8
#SBATCH --job-name=RNAseq_reference_preparation
#SBATCH --output=/data/users/aschmid/RNAseq_project/RNAseq_breastcancer/output/reference_preparation_output_%J.o
#SBATCH --error=/data/users/aschmid/RNAseq_project/RNAseq_breastcancer/output/reference_preparation_error_%J.o

# Define variables
REFERENCE_DIR="/data/users/aschmid/RNAseq_project/RNAseq_breastcancer/results/Reference_genome"
REFERENCE_GENOME="https://ftp.ensembl.org/pub/release-113/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz"
REFERENCE_ANNOTATION="https://ftp.ensembl.org/pub/release-113/gtf/homo_sapiens/Homo_sapiens.GRCh38.113.gtf.gz"
GENOME_CHECKSUM_LINK="https://ftp.ensembl.org/pub/release-113/fasta/homo_sapiens/dna/CHECKSUMS"
ANNOTATION_CHECKSUM_LINK="https://ftp.ensembl.org/pub/release-113/gtf/homo_sapiens/CHECKSUMS"

mkdir -p $REFERENCE_DIR
cd $REFERENCE_DIR

# Downloading reference genome and genome annotation
wget $REFERENCE_GENOME
wget $REFERENCE_ANNOTATION

# Check file integrity

# download checksum file without saving it -> get the line corresponding to the file -> keep the 2 first columns
genome_expected_checksum=$(wget -O - $GENOME_CHECKSUM_LINK | grep $(basename $REFERENCE_GENOME) | awk '{print $1,$2}')
annotation_expected_checksum=$(wget -O - $ANNOTATION_CHECKSUM_LINK | grep $(basename $REFERENCE_ANNOTATION) | awk '{print $1,$2}')

# Testing if calculated checksum is as expected
if [ "$genome_expected_checksum" != "$(sum $(basename $REFERENCE_GENOME))" ] || \
    [ "$annotation_expected_checksum" != "$(sum $(basename $REFERENCE_ANNOTATION))" ]
then 
    # throw an error and exit
    echo "Checksums are not as expected !">&2
    rm $(basename $REFERENCE_GENOME)
    rm $(basename $REFERENCE_ANNOTATION)
    exit 1
else
    echo "Checksums are OK !"
fi

# Indexing