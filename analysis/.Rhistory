p_values
p_value
# Search for accumulation of palindromes somewhere in the genome
# H0 : lambda0 = lambda = 5.576271
# HA : lambda > lambda0
# One-sided test
p_values <- ppois(X, lambda=lambda)
p_values <- ppois(X, lambda=lambda, lower.tail = F)
ppois(X, lambda=lambda, lower.tail = F)
1-ppois(X, lambda=lambda, lower.tail = T)
which(p_values < alpha) # No bin has a significant accumulation of palindromes
# Search for accumulation of palindromes somewhere in the genome
# H0 : lambda0 = lambda = 5.576271
# HA : lambda > lambda0
# One-sided test (alternative = greater)
alpha <- 0.05
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha) # No bin has a significant accumulation of palindromes
# Search for accumulation of palindromes somewhere in the genome
# H0 : lambda0 = lambda = 5.576271
# HA : lambda > lambda0
# One-sided test (alternative = greater)
alpha <- 0.0005
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)               # Reject H0 for these bins : 17 24 42 48 51
# The bins 17, 24, 42, 48 and 51 have a significantly higher number of palindromes than expected
# The distribution of palindromes is not uniform along the genome
24*4000
0.05*59
0.0005*59
library(car)
d <- read.table("C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\training.txt", header = T)
# a)
qqPlot(d$before, distribution = "norm", mean = mean(d$before), sd = sd(d$before))
qqPlot(d$after, distribution = "norm", mean = mean(d$after), sd = sd(d$after))
qqPlot(d$after-d$before, distribution = "norm", mean = mean(d$after-d$before), sd = sd(d$after-d$before))
# b)
# Cannot use Wilcoxon because not symmetric around the median(after-before)
# X = d$after - d$before
# H0 : median(after-before) = m0 = 0
# H1 : median(after-before) > 0
# Test statistic : V = #{i|Xi > 0}: number of values larger than m0 = 0
#   Distribution of V under H0: V ~ Bin(n, 0.5)
# Significance level: alpha = 0.05
alpha <- 0.05
V <- sum(d$after > d$before)
binom.test(V, nrow(d), p = 0.5, alternative = "greater", conf.level = 1-alpha)
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
# a)
path <- "C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\palindromes.txt"
p <- scan(text = gsub("^10:\\s*", "", readLines(path)), what = numeric(), sep = ",")
# b)
# The HCMV genome is 235727 bp long. Divide it into bins of 4000 bp length => 59 bins
# Xi : number of palindromes in bin i
# Expected distribution : Xi ~ Poisson(lambda), rare event in a giver region, all bins should have around the same number of bins
attributed_bins <- ceiling(p/4000)  # p[i] is in between bin[i-1] and bin[i]
X <- as.numeric(table(attributed_bins))
# c)
# Estimated lambda = mean(X)
lambda <- mean(X)
qqPlot(X, distribution = "pois", lambda=lambda)
# d)
# Search for accumulation of palindromes somewhere in the genome
# H0 : lambda0 = lambda = 5.576271
# HA : lambda > lambda0
# One-sided test (alternative = greater)
alpha <- 0.0005
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
p
p[0] <- 15
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
p[0] <- 16
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
p_values
which(p_values < alpha)
p[0] <- 17
X
X[0] <- 15
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
X[0] <- 16
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
X[0] <- 17
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
p_values
X
X[1] <- 16
X
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
X[1] <- 15
p_values <- 1-ppois(X, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
# d)
# Search for accumulation of palindromes somewhere in the genome
# H0 : lambda0 = lambda = 5.576271
# HA : lambda > lambda0
# One-sided test (alternative = greater)
alpha <- 0.0005
p_values <- 1-ppois(X-1, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
X[1] <- 15
p_values <- 1-ppois(X-1, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
X[1] <- 16
p_values <- 1-ppois(X-1, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
# a)
path <- "C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\palindromes.txt"
p <- scan(text = gsub("^10:\\s*", "", readLines(path)), what = numeric(), sep = ",")
# b)
# The HCMV genome is 235727 bp long. Divide it into bins of 4000 bp length => 59 bins
# Xi : number of palindromes in bin i
# Expected distribution : Xi ~ Poisson(lambda), rare event in a giver region, all bins should have around the same number of bins
attributed_bins <- ceiling(p/4000)  # p[i] is in between bin[i-1] and bin[i]
X <- as.numeric(table(attributed_bins))
# c)
# Estimated lambda = mean(X)
lambda <- mean(X)
qqPlot(X, distribution = "pois", lambda=lambda)
# d)
# Search for accumulation of palindromes somewhere in the genome
# H0 : lambda0 = lambda = 5.576271
# HA : lambda > lambda0
# One-sided test (alternative = greater)
alpha <- 0.0005
p_values <- 1-ppois(X-1, lambda=lambda) # Probability to get this value or higher under H0
which(p_values < alpha)
d <- read.table("C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\astro.dat", header = T)
d
library(car)
d <- read.table("C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\astro.dat", header = T)
qqPlot(d$before, main = "Before", distribution = "norm")
qqPlot(d$after, main = "After", distribution = "norm", mean = mean(d$after), sd = sd(d$after))
# Check normality of before, after and difference
par(mfrow = c(1, 3)
qqPlot(d$after, main = "After", distribution = "norm", mean = mean(d$after), sd = sd(d$after))
d <- read.table("C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\astro.dat", header = T)
# Check normality of before, after and difference
qqPlot(d$before, main = "Before", distribution = "norm", mean = mean(d$before), sd = sd(d$before))
qqPlot(d$after, main = "After", distribution = "norm", mean = mean(d$after), sd = sd(d$after))
qqPlot(d$after - d$before, main = "Difference", distribution = "norm", mean = mean(d$after - d$before), sd = sd(d$after - d$before))
# Check normality of before, after and difference
par(mfrow = c(1, 3)
# Check normality of before, after and difference
par(mfrow = c(1, 3))
qqPlot(d$before, main = "Before", distribution = "norm", mean = mean(d$before), sd = sd(d$before))
qqPlot(d$after, main = "After", distribution = "norm", mean = mean(d$after), sd = sd(d$after))
qqPlot(d$after - d$before, main = "Difference", distribution = "norm", mean = mean(d$after - d$before), sd = sd(d$after - d$before))
# Conclusion :
#   Before and after does not follow a normal distribution => non-parametric test
# Checkin distribution around median:
hist(d$before)
hist(d$after - d$before)
# Conclusion :
#   Before and after does not follow a normal distribution => non-parametric test
# Checkin distribution around median:
hist(d$before)
# Conclusion :
#   Before and after does not follow a normal distribution => non-parametric test
# Checkin distribution around median:
hist(d$before)
hist(d$after)
hist(d$after - d$before)
qqPlot(d$before, main = "Before", distribution = "norm", mean = mean(d$before), sd = sd(d$before))
qqPlot(d$after, main = "After", distribution = "norm", mean = mean(d$after), sd = sd(d$after))
qqPlot(d$after - d$before, main = "Difference", distribution = "norm", mean = mean(d$after - d$before), sd = sd(d$after - d$before))
d <- read.table("C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\astro.dat", header = T)
library(car)
d <- read.table("C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\astro.dat", header = T)
# a) Check if difference between before and after
# Check normality of difference between after and before
qqPlot(d$after - d$before, main = "Difference", distribution = "norm", mean = mean(d$after - d$before), sd = sd(d$after - d$before))
# Conclusion :
# Difference follows a normal distribution => paired t-test
t.test(d$after, d$before, paired = T)
# Conclusion :
# Difference follows a normal distribution => paired t-test
alpha <- .05
t.test(d$after, d$before, paired = T, conf.level = 1-alpha)
# Check that the two samples are normally distributed
qqPlot(d$diff[d$salt == 0], main = "Difference without salt", distribution = "norm", mean = mean(d$diff[d$salt == 0]), sd = sd(d$diff[d$salt == 0]))
qqPlot(d$diff[d$salt == 1], main = "Difference with salt", distribution = "norm", mean = mean(d$diff[d$salt == 1]), sd = sd(d$diff[d$salt == 1]))
d$diff[d$salt == 1]
# b) We want to check if the salt changes the bpm
# 2 sample test (1 sample with salt = 0, 1 sample with salt = 1)
d$diff <- d$after - d$before
# Check that the two samples are normally distributed
qqPlot(d$diff[d$salt == 0], main = "Difference without salt", distribution = "norm", mean = mean(d$diff[d$salt == 0]), sd = sd(d$diff[d$salt == 0]))
qqPlot(d$diff[d$salt == 1], main = "Difference with salt", distribution = "norm", mean = mean(d$diff[d$salt == 1]), sd = sd(d$diff[d$salt == 1]))
# Both are normally distributed => 2 sample t-test
t.test(d$diff[d$salt == 0], d$diff[d$salt == 1], conf.level = 1-alpha)
# b) We want to check if the salt makes a difference on the bpm after the flight
# 2 sample test (1 sample with salt = 0, 1 sample with salt = 1)
# Check that the two samples are normally distributed
qqPlot(d$after[d$salt == 0], main = "Difference without salt", distribution = "norm", mean = mean(d$after[d$salt == 0]), sd = sd(d$after[d$salt == 0]))
qqPlot(d$after[d$salt == 1], main = "Difference with salt", distribution = "norm", mean = mean(d$after[d$salt == 1]), sd = sd(d$after[d$salt == 1]))
# Both are normally distributed => 2 sample t-test
t.test(d$after[d$salt == 0], d$after[d$salt == 1], conf.level = 1-alpha)
library(car)
d <- read.table("C:\\Users\\aymer\\Documents\\Master\\1st semester\\104207 Applied biostatistics I\\Exercices\\Datasets\\astro.dat", header = T)
# a) Check if difference between before and after
# Check normality of difference between after and before
qqPlot(d$after - d$before, main = "Difference", distribution = "norm", mean = mean(d$after - d$before), sd = sd(d$after - d$before))
# Conclusion :
# Difference follows a normal distribution => paired t-test
# H0 : mean difference = 0
# H1 : mean difference != 0
alpha <- .05
t.test(d$after, d$before, paired = T, conf.level = 1-alpha)
# b) We want to check if the salt makes a difference on the bpm after the flight
# 2 sample test (1 sample with salt = 0, 1 sample with salt = 1)
# Check that the two samples are normally distributed
qqPlot(d$after[d$salt == 0], main = "Difference without salt", distribution = "norm", mean = mean(d$after[d$salt == 0]), sd = sd(d$after[d$salt == 0]))
qqPlot(d$after[d$salt == 1], main = "Difference with salt", distribution = "norm", mean = mean(d$after[d$salt == 1]), sd = sd(d$after[d$salt == 1]))
# Both are normally distributed => 2 sample t-test
t.test(d$after[d$salt == 0], d$after[d$salt == 1], conf.level = 1-alpha)
# Significant difference between before and after with salt:
# Significant difference between before and after with salt:
#       data:  d$diff[d$salt == 0] and d$diff[d$salt == 1]
# Significant difference between before and after with salt:
#       data:  d$diff[d$salt == 0] and d$diff[d$salt == 1]
#       t = 2.4827, df = 17.26, p-value = 0.0236
# Significant difference between before and after with salt:
#       data:  d$diff[d$salt == 0] and d$diff[d$salt == 1]
#       t = 2.4827, df = 17.26, p-value = 0.0236
#       alternative hypothesis: true difference in means is not equal to 0
# Significant difference between before and after with salt:
#       data:  d$diff[d$salt == 0] and d$diff[d$salt == 1]
#       t = 2.4827, df = 17.26, p-value = 0.0236
#       alternative hypothesis: true difference in means is not equal to 0
#       95 percent confidence interval:
# Significant difference between before and after with salt:
#       data:  d$diff[d$salt == 0] and d$diff[d$salt == 1]
#       t = 2.4827, df = 17.26, p-value = 0.0236
#       alternative hypothesis: true difference in means is not equal to 0
#       95 percent confidence interval:
#         1.596713 19.527470
# Significant difference between before and after with salt:
#       data:  d$diff[d$salt == 0] and d$diff[d$salt == 1]
#       t = 2.4827, df = 17.26, p-value = 0.0236
#       alternative hypothesis: true difference in means is not equal to 0
#       95 percent confidence interval:
#         1.596713 19.527470
#       sample estimates:
# Significant difference between before and after with salt:
#       data:  d$diff[d$salt == 0] and d$diff[d$salt == 1]
#       t = 2.4827, df = 17.26, p-value = 0.0236
#       alternative hypothesis: true difference in means is not equal to 0
#       95 percent confidence interval:
#         1.596713 19.527470
#       sample estimates:
#         mean of x mean of y
# Install required packages if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("DESeq2", quietly = TRUE)) BiocManager::install("DESeq2")
if (!requireNamespace("stringr", quietly = TRUE)) install.packages("stringr")
# Load libraries
library(stringr)
library(DESeq2)
# Table without multimapped reads
FILE_PATH_SIMPLE <- "C:\\Users\\aymer\\Documents\\Master\\1st semester\\467713 RNA-sequencing\\Project\\Data\\Quantification\\gene_counts_table.txt"
# Table with multimapped reads
FILE_PATH_MULTI <- "C:\\Users\\aymer\\Documents\\Master\\1st semester\\467713 RNA-sequencing\\Project\\Data\\Quantification\\gene_counts_multi_table.txt"
read_featurecounts_table <- function(path){
# Loading quantification table
counts <- read.table(path, header = T)
# Setting the row name with gene id
rownames(counts) <- counts$Geneid
# Select only columns that are sample-specific (.bam files)
counts <- counts[, grepl("\\.bam$", colnames(counts))]
# Extract sample names from column names (removing path and .bam suffix)
names(counts) <- str_extract(names(counts), "[^\\.]+(?=\\.bam$)")
return(counts)
}
# Load both tables
counts_simple <- read_featurecounts_table(FILE_PATH_SIMPLE)
generate_sample_metadata <- function(counts){
# Extract sample types by removing trailing digits
sample_types <- sub("\\d$", "", names(counts))
return(data.frame(
row.names = names(counts),
type = factor(sample_types)
))
}
# Create DESeq2 datasets for both cases
dds_simple <- DESeqDataSetFromMatrix(countData = read_featurecounts_table(FILE_PATH_SIMPLE),
colData = generate_sample_metadata(FILE_PATH_SIMPLE),
design = ~ type)
# Run DESeq for both datasets
dds_simple <- DESeq(dds_simple)
# Variance stabilizing transformation (VST) for both datasets
vsd_simple <- vst(dds_simple, blind = TRUE)
plotPCA(vsd_simple, intgroup = "type", main = "Without Multimapped Reads")
# Load both tables
counts_simple <- read_featurecounts_table(FILE_PATH_SIMPLE)
generate_sample_metadata <- function(counts){
# Extract sample types by removing trailing digits
sample_types <- sub("\\d$", "", names(counts))
return(data.frame(
row.names = names(counts),
type = factor(sample_types)
))
}
# Create DESeq2 datasets for both cases
dds_simple <- DESeqDataSetFromMatrix(countData = read_featurecounts_table(FILE_PATH_SIMPLE),
colData = generate_sample_metadata(FILE_PATH_SIMPLE),
design = ~ type)
tail(counts_simple)
# Create DESeq2 datasets for both cases
dds_simple <- DESeqDataSetFromMatrix(countData = counts_simple,
colData = generate_sample_metadata(counts_simple),
design = ~ type)
# Run DESeq for both datasets
dds_simple <- DESeq(dds_simple)
# Variance stabilizing transformation (VST) for both datasets
vsd_simple <- vst(dds_simple, blind = TRUE)
plotPCA(vsd_simple, intgroup = "type", main = "Without Multimapped Reads")
plotPCA(vsd_simple, intgroup = "type")
plotPCA(vsd_simple, intgroup = "type", label = T)
names(counts)
names(counts_simple)
pca_data <- plotPCA(vsd_simple, intgroup = "type", returnData = TRUE)
# Add sample names to the data
pca_data$Sample <- rownames(pca_data)
# Plot with ggplot2, adding labels for each sample
ggplot(pca_data, aes(x = PC1, y = PC2, color = group)) +
geom_point(size = 3) +  # Points for each sample
geom_text(aes(label = Sample), vjust = -1.5, size = 3) +  # Add sample names as labels
labs(
title = "PCA Plot with Sample Names",
x = paste0("PC1: ", round(attr(pca_data, "percentVar")[1] * 100, 1), "% variance"),
y = paste0("PC2: ", round(attr(pca_data, "percentVar")[2] * 100, 1), "% variance")
) +
theme_minimal() +
theme(legend.position = "right")
d <- data.frame(x <- 1:5, y <- 5:1)
d
d <- data.frame(x = 1:5, y = 5:1)
d
d[d$x==1]
d$y[d$x ==1]
d[d$x ==1]
d[d$x ==1,]
d$x == 1
d
d$y[d$x == 1]
d[d$x == 1,]
d[c(TRUE, FALSE, FALSE, TRUE, FALSE),]
# Install required packages if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("DESeq2", quietly = TRUE)) BiocManager::install("DESeq2")
if (!requireNamespace("stringr", quietly = TRUE)) install.packages("stringr")
# Load libraries
library(stringr)
library(DESeq2)
# Table without multimapped reads
FILE_PATH_SIMPLE <- "C:\\Users\\aymer\\Documents\\Master\\1st semester\\467713 RNA-sequencing\\Project\\Data\\Quantification\\gene_counts_table.txt"
# Table with multimapped reads
FILE_PATH_MULTI <- "C:\\Users\\aymer\\Documents\\Master\\1st semester\\467713 RNA-sequencing\\Project\\Data\\Quantification\\gene_counts_multi_table.txt"
read_featurecounts_table <- function(path){
# Loading quantification table
counts <- read.table(path, header = T)
# Setting the row name with gene id
rownames(counts) <- counts$Geneid
# Select only columns that are sample-specific (.bam files)
counts <- counts[, grepl("\\.bam$", colnames(counts))]
# Extract sample names from column names (removing path and .bam suffix)
names(counts) <- str_extract(names(counts), "[^\\.]+(?=\\.bam$)")
return(counts)
}
# Load both tables
counts_simple <- read_featurecounts_table(FILE_PATH_SIMPLE)
counts_multi <- read_featurecounts_table(FILE_PATH_MULTI)
head(counts_multi)
generate_sample_metadata <- function(counts){
# Extract sample types by removing trailing digits
sample_types <- sub("\\d$", "", names(counts))
return(data.frame(
row.names = names(counts),
type = factor(sample_types)
))
}
# Create DESeq2 datasets for both cases
dds_simple <- DESeqDataSetFromMatrix(countData = counts_simple,
colData = generate_sample_metadata(counts_simple),
design = ~ type)
dds_multi <- DESeqDataSetFromMatrix(countData = counts_multi,
colData = generate_sample_metadata(counts_multi),
design = ~ type)
dds_multi <- DESeqDataSetFromMatrix(countData = counts_multi,
colData = generate_sample_metadata(counts_multi),
design = ~ type)
class(counts_multi)
# Create DESeq2 datasets for both cases
dds_simple <- DESeqDataSetFromMatrix(countData = counts_simple,
colData = generate_sample_metadata(counts_simple),
design = ~ type)
dds_multi <- DESeqDataSetFromMatrix(countData = counts_multi,
colData = generate_sample_metadata(counts_multi),
design = ~ type)
generate_sample_metadata(counts_multi)
class(counts_multi$HER21)
names(counts_multi)
# Install required packages if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
if (!requireNamespace("DESeq2", quietly = TRUE)) BiocManager::install("DESeq2")
if (!requireNamespace("stringr", quietly = TRUE)) install.packages("stringr")
# Load libraries
library(stringr)
library(DESeq2)
# Table without multimapped reads
FILE_PATH_SIMPLE <- "C:\\Users\\aymer\\Documents\\Master\\1st semester\\467713 RNA-sequencing\\Project\\Data\\Quantification\\gene_counts_table.txt"
# Table with multimapped reads
FILE_PATH_MULTI <- "C:\\Users\\aymer\\Documents\\Master\\1st semester\\467713 RNA-sequencing\\Project\\Data\\Quantification\\gene_counts_multi_table.txt"
read_featurecounts_table <- function(path){
# Loading quantification table
counts <- read.table(path, header = T)
# Setting the row name with gene id
rownames(counts) <- counts$Geneid
# Select only columns that are sample-specific (.bam files)
counts <- counts[, grepl("\\.bam$", colnames(counts))]
# Extract sample names from column names (removing path and .bam suffix)
names(counts) <- str_extract(names(counts), "[^\\.]+(?=\\.bam$)")
return(counts)
}
# Load both tables
counts_simple <- read_featurecounts_table(FILE_PATH_SIMPLE)
counts_multi <- read_featurecounts_table(FILE_PATH_MULTI)
generate_sample_metadata <- function(counts){
# Extract sample types by removing trailing digits
sample_types <- sub("\\d$", "", names(counts))
return(data.frame(
row.names = names(counts),
type = factor(sample_types)
))
}
# Create DESeq2 datasets for both cases
dds_simple <- DESeqDataSetFromMatrix(countData = counts_simple,
colData = generate_sample_metadata(counts_simple),
design = ~ type)
dds_multi <- DESeqDataSetFromMatrix(countData = counts_multi,
colData = generate_sample_metadata(counts_multi),
design = ~ type)
setwd("C:/Users/aymer/Documents/Master/1st semester/467713 RNA-sequencing/Project/Analysis")
source("scripts/utils.R")
# Only load the "simple" DESeqDataSet object, as we will use it for the analysis
dds <- readRDS(DDS_FILE_SIMPLE)
# Perform differential expression analysis
res <- results(dds, contrast = c("type", "TNBC", "NonTNBC"))
# Filter significant genes
res_sig <- res[!is.na(res$padj) & res$padj < 0.05, ]
# Number of differentially expressed genes
num_de_genes <- nrow(res_sig)
counts(dds)
counts(dds)$NonTNBC1 + counts(dds)$NonTNBC2 + counts(dds)$NonTNBC3
sum(counts(dds)$NonTNBC1) + counts(dds)$NonTNBC2 + counts(dds)$NonTNBC3
sum(counts(dds)$NonTNBC1) + sum(counts(dds)$NonTNBC2) + sum(counts(dds)$NonTNBC3)
counts(dds)
counts(dds)$HER22
counts(dds)["HER22"]
counts(dds)["HER22",]
class(counts(DDS))
class(counts(dds))
counts(dds)[1,]
counts(dds)[,"HER21"]
sum(counts(dds)[,"HER21"])
sum(counts(dds)[,"HER21"]) + sum(counts(dds)[,"HER22"]) + sum(counts(dds)[,"HER23"])
sum(counts(dds)[,"TNBC1"]) + sum(counts(dds)[,"TNBC2"]) + sum(counts(dds)[,"TNBC3"])
head(counts(dds))
sum(counts(dds)[,"NonTNBC1"]) + sum(counts(dds)[,"NonTNBC2"]) + sum(counts(dds)[,"NonTNBC3"])
sum(counts(dds)[,"Normal1"]) + sum(counts(dds)[,"Normal2"]) + sum(counts(dds)[,"Normal3"])
sum(counts(dds)[,"HER21"]) + sum(counts(dds)[,"HER22"]) + sum(counts(dds)[,"HER23"])
sum(counts(dds)[,"TNBC1"]) + sum(counts(dds)[,"TNBC2"]) + sum(counts(dds)[,"TNBC3"])
sum(counts(dds)[,"NonTNBC1"]) + sum(counts(dds)[,"NonTNBC2"]) + sum(counts(dds)[,"NonTNBC3"])
sum(counts(dds)[,"Normal1"]) + sum(counts(dds)[,"Normal2"]) + sum(counts(dds)[,"Normal3"])
setwd("C:/Users/aymer/Documents/Master/1st semester/467713 RNA-sequencing/Project/Analysis")
source("scripts/utils.R")
# Only load the "simple" DESeqDataSet object, as we will use it for the analysis
dds <- readRDS(DDS_FILE_SIMPLE)
# Perform differential expression analysis
res <- results(dds, contrast = c("type", "TNBC", "NonTNBC"))
# Filter significant genes
res_sig <- res[!is.na(res$padj) & res$padj < 0.05, ]
# Number of differentially expressed genes
num_de_genes <- nrow(res_sig)
cat("Number of DE genes (padj < 0.05):", num_de_genes, "\n")
# Number of upregulated and downregulated genes
num_upregulated <- sum(res_sig$log2FoldChange > 0)
num_downregulated <- sum(res_sig$log2FoldChange < 0)
cat("Upregulated genes:", num_upregulated, "\n")
# Load both tables
counts_simple <- read_featurecounts_table(COUNTS_FILE_SIMPLE)
counts_multi <- read_featurecounts_table(COUNTS_FILE_MULTI)
sum(counts_multi[,"HER21"]) + sum(counts_multi[,"HER22"]) + sum(counts_multi[,"HER23"])
sum(counts_multi[,"TNBC1"]) + sum(counts_multi[,"TNBC2"]) + sum(counts_multi[,"TNBC3"])
sum(counts_multi[,"NonTNBC1"]) + sum(counts_multi[,"NonTNBC2"]) + sum(counts_multi[,"NonTNBC3"])
sum(counts_multi[,"Normal1"]) + sum(counts_multi[,"Normal2"]) + sum(counts_multi[,"Normal3"])
plotCounts(dds, gene=which.min(res$padj), intgroup="type")
sum(counts(dds, normalized=T))
sum(counts(dds, normalized=T))
sum(counts(dds, normalized=F))
counts(dds)
counts(dds)["*",]
counts(dds)[,]
counts(dds)["ENSG00000273274",]
counts(dds)["ENST*",]
counts(dds)["ENSTa",]
